# This is a simple example of using a config map to create a single page static site.
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}  
  labels:
    app: {{ .Release.Name }}
    chart: {{ template "clickhouse-on-kube.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  clickhouse_remote_servers.xml: |-
    <yandex>
        <remote_servers incl="clickhouse_remote_servers" >        
        <default_cluster>
            {{range $i, $e := until (atoi (printf "%d" (int64 .Values.replicaCount))) }}
              <shard>
                <replica>
                    <host>{{ $.Release.Name }}-{{$i}}</host>
                    <port>{{ $.Values.service.rpc_port }}</port>
                </replica>
              </shard>
            {{end}}
        </default_cluster>
        </remote_servers>
    </yandex>
  docker_related_config.xml: |-
    <yandex>
        <listen_host>0.0.0.0</listen_host>
        <listen_host>::</listen_host>
        <listen_try>1</listen_try>
        <!--
        <logger>
            <console>1</console>
        </logger>
        -->
    </yandex>
  security_config.xml: |-
    <yandex>
        <!-- Profiles-->
        <profiles>
            {{- range .Values.security.profiles }}
            <{{ .name }}>
                <!-- Maximum memory usage for processing single query, in bytes. -->
                <max_memory_usage>{{ int64 .max_memory_usage | default 10000000000 }}</max_memory_usage>

                <!-- Use cache of uncompressed blocks of data. Meaningful only for processing many of very short queries. -->
                <use_uncompressed_cache>{{ int64 .use_uncompressed_cache | default 0 }}</use_uncompressed_cache>

                <load_balancing>{{ .load_balancing | default "random" }}</load_balancing>
            </{{ .name }}>
            {{- end }}

            <!-- readonly profile -->
            <readonly>
                <readonly>1</readonly>
            </readonly>
        </profiles>

        <!-- Quotas -->
        <quotas>
            {{- range .Values.security.quotas }}
            <{{ .name }}>
                <!-- Limits for time interval. You could specify many intervals with different limits. -->
                <interval>
                    <!-- Length of interval. -->
                    <duration>{{ int64 .duration | default 3600 }}</duration>

                    <!-- No limits. Just calculate resource usage for time interval. -->
                    <queries>{{ int64 .queries | default 0 }}</queries>
                    <errors>{{ int64 .errors | default 0 }}</errors>
                    <result_rows>{{ int64 .result_rows | default 0 }}</result_rows>
                    <read_rows>{{ int64 .read_rows | default 0 }}</read_rows>
                    <execution_time>{{ int64 .execution_time | default 0 }}</execution_time>
                </interval>
            </{{ .name }}>
            {{- end }}
        </quotas>

        <!-- Users --> 
        <users>
            {{- range .Values.security.users }}
            <{{ .name }}>
                <password>{{ .password }}</password>
            
                <networks incl="networks" replace="replace">
                    <ip>::/0</ip>
                </networks>

                <!-- Settings profile for user. -->
                <profile>{{ .profile | default "default" }}</profile>

                <!-- Quota for user. -->
                <quota>{{ .quota | default "default" }}</quota>
            </{{ .name }}>
            {{- end }}
        </users>
    </yandex>
{{ if .Values.zk.enabled }}      
  zookeeper-servers.xml: |-
    <yandex>
        <zookeeper incl="zookeeper-servers">
            {{- range $index, $zk := .Values.zk.servers }}
            <node index="1">
                <host>{{ $zk }}</host>
                <port>{{ $.Values.zk.port }}</port>
            </node>
            {{- end }}        
        </zookeeper>

        <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.
        Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. -->        
        <distributed_ddl incl="clickhouse_distributed_ddl">
            <!-- Path in ZooKeeper to queue with DDL queries -->
            <path>/{{ .Release.Name }}/task_queue/ddl</path>

            <!-- Settings from this profile will be used to execute DDL queries -->
            <!-- <profile>default</profile> -->
        </distributed_ddl>
    </yandex>
{{ end }}
